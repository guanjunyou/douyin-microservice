// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	UserLogin(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	UserRegister(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	UserInfo(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserDetailResponse, error)
	GetUserById(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserDetailResponse, error)
	GetUserByName(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserDetailResponse, error)
	Save(ctx context.Context, in *SaveRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) UserLogin(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.UserLogin", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserRegister(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.UserRegister", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserInfo(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserDetailResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UserInfo", in)
	out := new(UserDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserById(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserDetailResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserById", in)
	out := new(UserDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserByName(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserDetailResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserByName", in)
	out := new(UserDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Save(ctx context.Context, in *SaveRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.Save", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	UserLogin(context.Context, *UserRequest, *emptypb.Empty) error
	UserRegister(context.Context, *UserRequest, *emptypb.Empty) error
	UserInfo(context.Context, *UserRequest, *UserDetailResponse) error
	GetUserById(context.Context, *UserRequest, *UserDetailResponse) error
	GetUserByName(context.Context, *UserRequest, *UserDetailResponse) error
	Save(context.Context, *SaveRequest, *emptypb.Empty) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		UserLogin(ctx context.Context, in *UserRequest, out *emptypb.Empty) error
		UserRegister(ctx context.Context, in *UserRequest, out *emptypb.Empty) error
		UserInfo(ctx context.Context, in *UserRequest, out *UserDetailResponse) error
		GetUserById(ctx context.Context, in *UserRequest, out *UserDetailResponse) error
		GetUserByName(ctx context.Context, in *UserRequest, out *UserDetailResponse) error
		Save(ctx context.Context, in *SaveRequest, out *emptypb.Empty) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) UserLogin(ctx context.Context, in *UserRequest, out *emptypb.Empty) error {
	return h.UserServiceHandler.UserLogin(ctx, in, out)
}

func (h *userServiceHandler) UserRegister(ctx context.Context, in *UserRequest, out *emptypb.Empty) error {
	return h.UserServiceHandler.UserRegister(ctx, in, out)
}

func (h *userServiceHandler) UserInfo(ctx context.Context, in *UserRequest, out *UserDetailResponse) error {
	return h.UserServiceHandler.UserInfo(ctx, in, out)
}

func (h *userServiceHandler) GetUserById(ctx context.Context, in *UserRequest, out *UserDetailResponse) error {
	return h.UserServiceHandler.GetUserById(ctx, in, out)
}

func (h *userServiceHandler) GetUserByName(ctx context.Context, in *UserRequest, out *UserDetailResponse) error {
	return h.UserServiceHandler.GetUserByName(ctx, in, out)
}

func (h *userServiceHandler) Save(ctx context.Context, in *SaveRequest, out *emptypb.Empty) error {
	return h.UserServiceHandler.Save(ctx, in, out)
}
